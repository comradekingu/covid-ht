# Generated by Django 3.1.5 on 2021-01-15 20:53

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('units', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_ii', models.CharField(blank=True, help_text='Unit Internal Identifier for mapping to physical record', max_length=50, null=True, verbose_name='Unit Internal Identifier')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Timestamp')),
                ('is_covid19', models.BooleanField(verbose_name='Is COVID19?')),
                ('age', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Age')),
                ('sex', models.BooleanField(blank=True, choices=[(None, 'Not Available'), (False, 'Female'), (True, 'Male')], null=True, verbose_name='Sex')),
                ('is_diabetic', models.BooleanField(null=True, verbose_name='Is Diabetic?')),
                ('is_hypertense', models.BooleanField(null=True, verbose_name='Is Hypertense?')),
                ('is_overweight', models.BooleanField(null=True, verbose_name='Is Overweight Patient?')),
                ('is_at_altitude', models.BooleanField(help_text='Is the Patient at High Altitude (> 1500m)', null=True, verbose_name='Is at Altitude?')),
                ('is_with_other_conds', models.BooleanField(help_text='Is the Patient with other Relevant Conditions? (Transplantation, Blood disorders, etc.)', null=True, verbose_name='Is with other Relevant Conditions?')),
                ('rbc', models.DecimalField(blank=True, decimal_places=3, help_text='Red Blood Cells (x10^12/L)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(2.0), django.core.validators.MaxValueValidator(8.0)], verbose_name='RBC (x10^12/L)')),
                ('wbc', models.DecimalField(blank=True, decimal_places=3, help_text='White Blood Cells (x10^12/L)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(2.0), django.core.validators.MaxValueValidator(40.0)], verbose_name='WBC (x10^9/L)')),
                ('hgb', models.SmallIntegerField(blank=True, help_text='Hemoglobin (g/L)', null=True, validators=[django.core.validators.MinValueValidator(80), django.core.validators.MaxValueValidator(240)], verbose_name='HGB (g/L)')),
                ('hct', models.DecimalField(blank=True, decimal_places=2, help_text='Hematocrit (g/L)', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(0.9)], verbose_name='HCT (L/L)')),
                ('mcv', models.SmallIntegerField(blank=True, help_text='Mean Cell Volume (fL)', null=True, validators=[django.core.validators.MinValueValidator(60), django.core.validators.MaxValueValidator(150)], verbose_name='MCV (fL)')),
                ('mch', models.SmallIntegerField(blank=True, help_text='Mean Corpuscular Hemoglobin (pg)', null=True, validators=[django.core.validators.MinValueValidator(60), django.core.validators.MaxValueValidator(150)], verbose_name='MCH (pg)')),
                ('mchc', models.SmallIntegerField(blank=True, help_text='Mean Corpuscular Hemoglobin Concentration (g/L)', null=True, validators=[django.core.validators.MinValueValidator(280), django.core.validators.MaxValueValidator(380)], verbose_name='MCHC (g/L)')),
                ('rdw', models.DecimalField(blank=True, decimal_places=2, help_text='Red Blood Cell Distribution Width (%)', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(5.0), django.core.validators.MaxValueValidator(40.0)], verbose_name='RDW (%)')),
                ('plt', models.SmallIntegerField(blank=True, help_text='Platelets (x10^9/L)', null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(550)], verbose_name='PLT (x10^9/L)')),
                ('neut', models.DecimalField(blank=True, decimal_places=2, help_text='Neutrophils (x10^9/L)', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(40.0)], verbose_name='NEUT (x10^9/L)')),
                ('lymp', models.DecimalField(blank=True, decimal_places=2, help_text='Lymphocytes (x10^9/L)', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(30.0)], verbose_name='LYMPH (x10^9/L)')),
                ('mono', models.DecimalField(blank=True, decimal_places=2, help_text='Monocytes (x10^9/L)', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0.01), django.core.validators.MaxValueValidator(15.0)], verbose_name='MONO (x10^9/L)')),
                ('eo', models.DecimalField(blank=True, decimal_places=2, help_text='Eosinophils (x10^9/L)', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)], verbose_name='EO (x10^9/L)')),
                ('baso', models.DecimalField(blank=True, decimal_places=2, help_text='Basophils (x10^9/L)', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)], verbose_name='BASO (x10^9/L)')),
                ('iga', models.DecimalField(blank=True, decimal_places=2, help_text='Inmunoglobulines - Active (x10^9/L)', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)], verbose_name='IGA (x10^9/L)')),
                ('igm', models.DecimalField(blank=True, decimal_places=2, help_text='Inmunoglobulines - Memory (x10^9/L)', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)], verbose_name='IGM (x10^9/L)')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='data', to='units.unit', verbose_name='Unit')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='data', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Data',
                'verbose_name_plural': 'Data',
                'ordering': ['-timestamp'],
            },
        ),
    ]
