# Generated by Django 3.1.5 on 2021-01-06 15:24
import numpy as np
import sys
import random
import uuid

from django.contrib.contenttypes.management import create_contenttypes
from django.db import migrations
from django.conf import settings

from data.utils import trunc_normal


def create_example(apps, schema_editor):
    # Hackery for ensuring all the apps are available
    from django.apps.registry import apps as dapps
    apps = dapps
    sl_config = apps.get_app_config('supervised_learning')
    sl_config.models_module = sl_config.models_module or True
    create_contenttypes(sl_config)
    #
    HGBTree = apps.get_model("supervised_learning", "HGBTree")
    DataColumn = apps.get_model("ai_base", "DataColumn")
    ContentType = apps.get_model("contenttypes", "ContentType")
    CurrentClassifier = apps.get_model("base", "CurrentClassifier")

    hgb_1 = HGBTree(
        name="HGB 1 (Example)",
        labels_column="data.data.is_covid19",
        cv_folds=10, cv_metric="accuracy",
        random_state=123456
    )
    hgb_1.save()
    dc0 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="age",
        position=0
    )
    dc0.save()
    dc1 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="sex",
        is_categorical=True,
        position=1
    )
    dc1.save()
    dc2 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="is_diabetic",
        is_categorical=True,
        position=2
    )
    dc2.save()
    dc3 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="is_hypertense",
        is_categorical=True,
        position=3
    )
    dc3.save()
    dc4 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="is_overweight",
        is_categorical=True,
        position=4
    )
    dc4.save()
    dc5 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="is_at_altitude",
        is_categorical=True,
        position=5
    )
    dc5.save()
    dc6 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="is_with_other_conds",
        is_categorical=True,
        position=6
    )
    dc6.save()
    dc7 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="rbc",
        is_categorical=False,
        monotonic_cst=-1,
        position=7
    )
    dc7.save()
    dc8 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="wbc",
        is_categorical=False,
        position=8
    )
    dc8.save()
    dc9 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="hgb",
        is_categorical=False,
        position=9
    )
    dc9.save()
    dc10 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="hct",
        is_categorical=False,
        position=10
    )
    dc10.save()
    dc11 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="mcv",
        is_categorical=False,
        position=11
    )
    dc11.save()
    dc12 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="mch",
        is_categorical=False,
        position=12
    )
    dc12.save()
    dc13 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="mchc",
        is_categorical=False,
        position=13
    )
    dc13.save()
    dc14 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="rdw",
        is_categorical=False,
        position=14
    )
    dc14.save()
    dc15 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="plt",
        is_categorical=False,
        position=15
    )
    dc15.save()
    dc16 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="neut",
        is_categorical=False,
        position=16
    )
    dc16.save()
    dc17 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="lymp",
        is_categorical=False,
        position=17
    )
    dc17.save()
    dc18 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="mono",
        is_categorical=False,
        position=18
    )
    dc18.save()
    dc19 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="eo",
        is_categorical=False,
        position=19
    )
    dc19.save()
    dc20 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="baso",
        is_categorical=False,
        position=20
    )
    dc20.save()
    dc21 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="iga",
        is_categorical=False,
        position=21
    )
    dc21 = DataColumn(
        content_type=ContentType.objects.get(model="hgbtree",
                                             app_label="supervised_learning"),
        object_id=hgb_1.id,
        ref_model=ContentType.objects.get(model="data",
                                          app_label="data"),
        ref_column="igm",
        is_categorical=False,
        position=21
    )
    dc21.save()
    hgb2 = HGBTree(
        name="HGB Scrachpad (Example)",
        labels_column="data.data.is_covid19",
        cv_folds=10, cv_metric="accuracy"
    )
    hgb2.save()
    CurrentClassifier.objects.create(classifier=hgb_1)
    # Populate Data (this aims to see how it works)
    Data = apps.get_model("data", "Data")
    Unit = apps.get_model("units", "Unit")
    User = apps.get_model("base", "User")
    # Use a fixed seed for generate content
    np.random.seed(123456)
    # Size of table
    covid_size = getattr(settings, "EXAMPLE_SIZE_COVID19", 200)
    no_covid_size = getattr(settings, "EXAMPLE_SIZE_NO_COVID19", 300)
    table_size = covid_size + no_covid_size
    print(" (Example data size is {})".format(table_size), end="")
    is_covid19 = \
        [True for i in range(covid_size)] + \
        [False for i in range(no_covid_size)]
    # Sex is ~ 55% F (0) / 45% M (1)
    sex = np.random.binomial(1, 0.55, table_size)
    # Age is around 50, mostly between 45 and 55
    age = np.floor(np.random.normal(50, 2, size=(table_size,)))
    # Is Diabetic is ~ 80% F (0) / 20% T (1)
    is_diabetic = np.random.binomial(1, 0.20, table_size)
    # Is Hypertense is ~ 60% F (0) / 40% T (1)
    is_hypertense = np.random.binomial(1, 0.35, table_size)
    # Is Overweight is ~ 70% F (0) / 30% T (1)
    is_overweight = np.random.binomial(1, 0.30, table_size)
    # Is at Altitude is ~ 70% F (0) / 30% T (1)
    is_at_altitude = np.random.binomial(1, 0.30, table_size)
    # Is with other conds is ~ 95% F (0) / 5% T (1)
    is_with_other_conds = np.random.binomial(1, 0.05, table_size)
    #
    rbc = \
        trunc_normal(2, 8, 4.5, 2, covid_size) + \
        trunc_normal(2, 8, 4.3, 2, no_covid_size)
    wbc = \
        trunc_normal(2, 40, 7, 4, covid_size) + \
        trunc_normal(2, 40, 10, 5, no_covid_size)
    hgb = \
        list(np.floor(trunc_normal(80, 240, 140, 5, covid_size))) + \
        list(np.floor(trunc_normal(80, 240, 140, 5, no_covid_size)))
    hct = \
        trunc_normal(0.1, 0.9, 0.4, 0.2, covid_size) + \
        trunc_normal(0.1, 0.9, 0.4, 0.2, no_covid_size)
    mcv = \
        list(np.floor(trunc_normal(60, 150, 80, 10, covid_size))) + \
        list(np.floor(trunc_normal(60, 150, 80, 10, no_covid_size)))
    mchc = \
        list(np.floor(trunc_normal(280, 380, 330, 15, covid_size))) + \
        list(np.floor(trunc_normal(280, 380, 330, 15, no_covid_size)))
    rdw = \
        trunc_normal(5, 40, 12, 4, covid_size) + \
        trunc_normal(5, 40, 12, 4, no_covid_size)
    plt = \
        list(np.floor(trunc_normal(50, 550, 220, 17, covid_size))) + \
        list(np.floor(trunc_normal(50, 550, 250, 20, no_covid_size)))
    neut = \
        trunc_normal(0.01, 40, 5, 2, covid_size) + \
        trunc_normal(0.01, 40, 8, 2, no_covid_size)
    lymp = \
        trunc_normal(0.01, 30, 8, 2, covid_size) + \
        trunc_normal(0.01, 30, 5, 2, no_covid_size)
    mono = \
        trunc_normal(0.01, 15, 8, 2, covid_size) + \
        trunc_normal(0.01, 15, 8, 2, no_covid_size)
    eo = \
        trunc_normal(0.0, 15, 8, 2, covid_size) + \
        trunc_normal(0.0, 15, 8, 2, no_covid_size)
    baso = \
        trunc_normal(0.0, 10, 4, 2, covid_size) + \
        trunc_normal(0.0, 10, 4, 2, no_covid_size)
    iga = \
        trunc_normal(0.0, 10, 4, 2, covid_size) + \
        trunc_normal(0.0, 10, 4, 2, no_covid_size)
    igm = \
        trunc_normal(0.0, 10, 4, 2, covid_size) + \
        trunc_normal(0.0, 10, 4, 2, no_covid_size)
    # Create the objects in the Model
    unit1 = Unit.objects.create(
        name="Lab at Hospital A (E)"
    )
    Unit.objects.create(
        name="Lab at Hospital B (E)"
    )
    Unit.objects.create(
        name="Local Lab C (E)"
    )
    Unit.objects.create(
        name="Clinic D (E)"
    )
    unit5 = Unit.objects.create(
        name="Healthcare Facility E (E)"
    )
    users = [
        User.objects.create(
            username='manager',
            password='manager',
            first_name='Manager',
            last_name='Rodríguez (E)',
            unit=unit5,
            email='mrodriguez@example.com',
            cellphone="123 123 123",
            user_type=User.MANAGER
        ),
        User.objects.create(
            username='staff',
            first_name='Estaff',
            last_name='García (E)',
            is_staff=True,
            unit=unit5
        ),
        User.objects.create(
            username='zhaobing',
            first_name='Bing',
            last_name='Zhao (E)',
            unit=unit5,
            email='zhaobing@example.com',
            cellphone="123 123 432",
            user_type=User.DATA
        ),
        User.objects.create(
            username='dimitri',
            first_name='Dimitri',
            last_name='Kristoff (E)',
            user_type=User.MANAGER,
            unit=unit1
        ),
        User.objects.create(
            username='rsmith',
            first_name='Rebecca',
            last_name='Smith (E)',
            user_type=User.DATA,
            unit=unit1
        ),
        User.objects.create(
            username='kjumanji',
            first_name='Kumal',
            last_name='Jumanji (E)',
            user_type=User.DATA,
            unit=unit1
        ),
    ]
    users[0].set_password('manager')
    users[0].save()
    users[1].set_password('staff')
    users[1].save()
    hgb_ct = ContentType.objects.get_for_model(HGBTree)
    data_column_ct = ContentType.objects.get_for_model(DataColumn)
    cc_ct = ContentType.objects.get_for_model(CurrentClassifier)
    Permission = apps.get_model("auth", "Permission")
    p1 = Permission.objects.get(content_type=hgb_ct, codename="add_hgbtree")
    p2 = Permission.objects.get(
        content_type=hgb_ct, codename="change_hgbtree"
    )
    p3 = Permission.objects.get(
        content_type=hgb_ct, codename="view_hgbtree"
    )
    users[1].user_permissions.add(p1, p2, p3)
    p4 = Permission.objects.get(
        content_type=data_column_ct, codename="add_datacolumn"
        )
    p5 = Permission.objects.get(
        content_type=data_column_ct, codename="change_datacolumn"
    )
    p6 = Permission.objects.get(
        content_type=data_column_ct, codename="view_datacolumn"
    )
    p7 = Permission.objects.get(
        content_type=data_column_ct, codename="delete_datacolumn"
    )
    users[1].user_permissions.add(p4, p5, p6, p7)
    p8 = Permission.objects.get(
        content_type=cc_ct, codename="change_currentclassifier"
    )
    p9 = Permission.objects.get(
        content_type=cc_ct, codename="view_currentclassifier"
    )
    users[1].user_permissions.add(p8, p9)

    ds = []
    for i in range(0, table_size):
        u = random.sample(users, 1)[0]
        # Add some missing data
        is_diab = is_diabetic[i] if np.random.uniform() > 0.1 else None
        is_hypert = is_hypertense[i] if np.random.uniform() > 0.1 else None
        is_other_conds = is_with_other_conds[i] \
            if np.random.uniform() > 0.1 else None
        ds.append(
            Data(
                uuid=uuid.uuid4(),
                user=u,
                unit=u.unit,
                is_covid19=is_covid19[i],
                age=age[i],
                sex=sex[i],
                is_diabetic=is_diab,
                is_hypertense=is_hypert,
                is_overweight=is_overweight[i],
                is_at_altitude=is_at_altitude[i],
                is_with_other_conds=is_other_conds,
                rbc=rbc[i],
                wbc=wbc[i],
                hgb=hgb[i],
                hct=hct[i],
                mcv=mcv[i],
                mchc=mchc[i],
                rdw=rdw[i],
                plt=plt[i],
                neut=neut[i],
                lymp=lymp[i],
                mono=mono[i],
                eo=eo[i],
                baso=baso[i],
                iga=iga[i],
                igm=igm[i]
            )
        )
    Data.objects.bulk_create(ds)
    hgb_1.perform_inference()


def delete_example(apps, schema_editor):
    # Hackery for ensuring all the apps are available
    from django.apps.registry import apps as dapps
    apps = dapps
    #
    HGBTree = apps.get_model(
        "supervised_learning", "HGBTree")
    Data = apps.get_model("data", "Data")
    Unit = apps.get_model("units", "Unit")
    User = apps.get_model("base", "User")
    CurrentClassifier = apps.get_model("base", "CurrentClassifier")

    cc = CurrentClassifier.objects.last()
    if "(Example)" in cc.classifier.name:
        cc.delete()

    HGBTree.objects.filter(name__icontains="(Example)").delete()
    # DataColumn should be deleted on models.CASCADE

    Data.objects.filter(unit__name__icontains="(E)").delete()
    User.objects.filter(last_name__icontains="(E)").delete()
    Unit.objects.filter(name__icontains="(E)").delete()


if getattr(settings, 'EXAMPLE_DATA', False) and 'test' not in sys.argv:
    ops = [
        migrations.RunPython(
            create_example,
            delete_example
        )
    ]
else:
    ops = [
        migrations.RunPython(
            migrations.RunPython.noop,
            migrations.RunPython.noop,
        )
    ]
    print("EXAMPLE_DATA disabled")


class Migration(migrations.Migration):

    dependencies = [
        ('data', '0001_initial'),
        ('ai_base', '0001_initial'),
    ]

    operations = ops
